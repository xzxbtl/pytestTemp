import pytest

URL_BASE = "/api/"
pytest_plugins = [
    "tests.fixtures"
]


# –ü–û–ó–ò–¢–ò–í–ù–´–ï –¢–ï–°–¢–´ + –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
@pytest.mark.asyncio
@pytest.mark.positive
async def test_state(api_client, api_base_url, test_logger):
    try:
        response = await api_client.get(f"{api_base_url}state", timeout=5)
        confirm_response = {'statusCode': 0, 'state': 'O–ö'}
        assert response.json() == confirm_response
        assert response.status_code == 200

    except AssertionError as e:
        test_logger.error(f"‚ùå AssertionError: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        raise

    except Exception as e:
        test_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")


@pytest.mark.asyncio
@pytest.mark.positive
async def test_addition_with_positive_random_numbers(api_client, api_base_url, get_random_numbers_to_request,
                                                     test_logger):
    try:
        response = await api_client.post(f"{api_base_url}addition", json=get_random_numbers_to_request, timeout=5)
        expected_result = int((x := get_random_numbers_to_request.get("x")) +
                              (y := get_random_numbers_to_request.get("y")))
        confirm_response = {"statusCode": 0, "result": expected_result}

        test_logger.info("üéØ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ —Å–ª–æ–∂–µ–Ω–∏—è")
        test_logger.debug(f"üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: x={x}, y={y}")
        test_logger.debug(f"üßÆ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected_result}")

        assert response.json() == confirm_response
        assert response.status_code == 200
        test_logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {x} + {y} = {expected_result}")

    except AssertionError as e:
        test_logger.error(f"‚ùå AssertionError: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        raise

    except Exception as e:
        test_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")


@pytest.mark.asyncio
@pytest.mark.positive
async def test_multiplication_positive_random_numbers(api_client, api_base_url, get_random_numbers_to_request,
                                                      test_logger):
    try:
        response = await api_client.post(f"{api_base_url}multiplication", json=get_random_numbers_to_request, timeout=5)
        expected_result = int((x := get_random_numbers_to_request.get("x")) *
                              (y := get_random_numbers_to_request.get("y")))
        confirm_response = {"statusCode": 0, "result": expected_result}

        test_logger.info("üéØ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è")
        test_logger.debug(f"üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: x={x}, y={y}")
        test_logger.debug(f"üßÆ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected_result}")

        assert response.json() == confirm_response
        assert response.status_code == 200

        test_logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {x} * {y} = {expected_result}")

    except AssertionError as e:
        test_logger.error(f"‚ùå AssertionError: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        raise

    except Exception as e:
        test_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")


@pytest.mark.asyncio
@pytest.mark.positive
async def test_division_positive_random_numbers(api_client, api_base_url, get_random_numbers_to_request,
                                                test_logger):
    try:
        response = await api_client.post(f"{api_base_url}division", json=get_random_numbers_to_request, timeout=5)
        expected_result = int((x := get_random_numbers_to_request.get("x")) //
                              (y := get_random_numbers_to_request.get("y")))
        confirm_response = {"statusCode": 0, "result": expected_result}

        test_logger.info("üéØ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –¥–µ–ª–µ–Ω–∏—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞")
        test_logger.debug(f"üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: x={x}, y={y}")
        test_logger.debug(f"üßÆ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected_result}")

        assert response.json() == confirm_response
        assert response.status_code == 200
        test_logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {x} // {y} = {expected_result}")

    except AssertionError as e:
        test_logger.error(f"‚ùå AssertionError: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        raise

    except Exception as e:
        test_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")


@pytest.mark.asyncio
@pytest.mark.positive
async def test_remainder_positive_random_numbers(api_client, api_base_url, get_random_numbers_to_request,
                                                 test_logger):
    try:
        response = await api_client.post(f"{api_base_url}remainder", json=get_random_numbers_to_request, timeout=5)
        expected_result = int((x := get_random_numbers_to_request.get("x")) %
                              (y := get_random_numbers_to_request.get("y")))
        confirm_response = {"statusCode": 0, "result": expected_result}

        test_logger.info("üéØ –ù–∞—á–∞–ª–æ –¥–µ–ª–µ–Ω–∏—è —Å –æ—Å—Ç–∞—Ç–∫–æ–º")
        test_logger.debug(f"üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: x={x}, y={y}")
        test_logger.debug(f"üßÆ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected_result}")

        assert response.json() == confirm_response
        assert response.status_code == 200
        test_logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {x} % {y} = {expected_result}")

    except AssertionError as e:
        test_logger.error(f"‚ùå AssertionError: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        raise

    except Exception as e:
        test_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")


@pytest.mark.asyncio
@pytest.mark.positive
@pytest.mark.parametrize("operation", ["addition", "multiplication", "division", "remainder"])
async def test_with_negative_values(api_client, api_base_url, operation, get_negative_numbers,
                                    test_logger):
    try:
        response = await api_client.post(
            f"{api_base_url}{operation}",
            json=get_negative_numbers,
            timeout=5
        )
        expected_status = 0
        response_data = response.json()

        assert response_data.get("statusCode") == expected_status  # –û–ñ–ò–î–ê–ï–¢–°–Ø –°–¢–ê–¢–£–° 1

    except AssertionError as e:
        test_logger.error(f"‚ùå AssertionError: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        raise

    except Exception as e:
        test_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")


# –ù–ï–ì–ê–¢–ò–í–ù–´–ï –¢–ï–°–¢–´

@pytest.mark.asyncio
@pytest.mark.negative
@pytest.mark.parametrize("operation", ["addition", "multiplication", "division", "remainder"])
async def test_negative_keys(api_client, api_base_url, operation, get_incorrect_keys,
                             test_logger):
    try:
        response = await api_client.post(
            f"{api_base_url}{operation}",
            json=get_incorrect_keys,
            timeout=5
        )

        expected_status = 0
        response_data = response.json()

        assert response_data.get("statusCode") == expected_status  # –û–ñ–ò–î–ê–ï–¢–°–Ø –°–¢–ê–¢–£–° 2

    except AssertionError as e:
        test_logger.error(f"‚ùå AssertionError: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        raise

    except Exception as e:
        test_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")


@pytest.mark.asyncio
@pytest.mark.negative
@pytest.mark.parametrize("urls", ["states", "additions", "multiplications", "divisions", "remainders"])
async def test_negative_urls(api_client, api_base_url, urls, test_logger):
    try:
        response = await api_client.get(f"{api_base_url}{urls}", timeout=5)
        expected_status = 0
        response_data = response.json()

        assert response_data.get("statusCode") == expected_status  # –û–ñ–ò–î–ê–ï–¢–°–Ø –°–¢–ê–¢–£–° 5

    except AssertionError as e:
        test_logger.error(f"‚ùå AssertionError: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        raise

    except Exception as e:
        test_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")


@pytest.mark.asyncio
@pytest.mark.negative
@pytest.mark.parametrize("operation", ["addition", "multiplication", "division", "remainder"])
async def test_negative_largest_numbers(api_client, api_base_url, operation, get_largest_numbers,
                                        test_logger):
    try:
        response = await api_client.post(
            f"{api_base_url}{operation}",
            json=get_largest_numbers,
            timeout=5
        )
        expected_status = 0
        response_data = response.json()

        assert response_data.get("statusCode") == expected_status  # –û–ñ–ò–î–ê–ï–¢–°–Ø –°–¢–ê–¢–£–° 4

    except AssertionError as e:
        test_logger.error(f"‚ùå AssertionError: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        raise

    except Exception as e:
        test_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")


@pytest.mark.asyncio
@pytest.mark.negative
@pytest.mark.parametrize("operation", ["addition", "multiplication", "division", "remainder"])
@pytest.mark.parametrize(
    "incorrect_number", [1.1, "gfdgfd", (12, 13), [12, 14]]
)
async def test_with_incorrect_numbers(api_client, api_base_url, operation,
                                      get_random_numbers_to_request, incorrect_number,
                                      test_logger):
    test_data = get_random_numbers_to_request.copy()
    test_data["x"] = incorrect_number

    try:
        response = await api_client.post(
            f"{api_base_url}{operation}",
            json=test_data,
            timeout=5
        )
        expected_status = 0
        response_data = response.json()

        assert response_data.get("statusCode") == expected_status  # –û–ñ–ò–î–ê–ï–¢–°–Ø –°–¢–ê–¢–£–° 3

    except AssertionError as e:
        test_logger.error(f"‚ùå AssertionError: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        raise

    except Exception as e:
        test_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")


@pytest.mark.asyncio
@pytest.mark.negative
async def test_division_on_zero_value(api_client, api_base_url, get_zero_to_division,
                                      test_logger):
    try:
        response = await api_client.post(f"{api_base_url}division", json=get_zero_to_division, timeout=5)
        expected_status = 0
        response_data = response.json()

        assert response_data.get("statusCode") == expected_status  # –û–ñ–ò–î–ê–ï–¢–°–Ø –°–¢–ê–¢–£–° 1

    except AssertionError as e:
        test_logger.error(f"‚ùå AssertionError: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        raise

    except Exception as e:
        test_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        test_logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
